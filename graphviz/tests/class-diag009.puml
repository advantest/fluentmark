@startuml

    interface Map<K, E> {
        get(key: K): E
        put(key: K, entry: E): boolean
    }

    class ZipCodeCityMap {
        isValid(code: ZipCode)
        findZipCode(city: String): ZipCode
    }

    ' use <<bind>> to describe the type variable bindings
    ' "K -> ZipCode" means type variable K is bound to type ZipCode
    ' use "\n" for line breaks
    Map <|.. ZipCodeCityMap : <<bind>>\n<K -> ZipCode, E -> String>

    ' You may make the dependency to the type bound to a type variable explicit,
    ' e.g. if you want to show some details of the class, here ZipCode
    ZipCodeCityMap ..> ZipCode

    ZipCode : -code: String
    ZipCode : +ZipCode(code: String)

    interface List<T>
    class EList<T extends EObject>

    List <|.. EList

footer Rendered with PlantUML version %version()
@enduml