xvisitor grammar Structure;

options {
	superClass = StructureBuilder;
	parserClass = MdParser ;
}

@header {
	package net.certiv.fluent.dt.core.lang.md.gen;
	import  net.certiv.fluent.dt.core.lang.md.model.StructureBuilder;
	import  static net.certiv.fluent.dt.core.lang.md.model.SpecializedType.*;
	import  static net.certiv.fluent.dt.core.lang.md.model.SpecSubType.*;
}

structure
	: page

	| header
	| hrule
	| table
	| definition
	| list

	| paragraph
	| phrase
#	| word
#	| attrL
#	| attrR

	| link
	| linkRef
	| imglink
	| imglinkRef
	| fnlink
	| fnlinkRef
	
	| refLinkDef
	| fnLinkDef

	| comment

	| yamlBlock
	| htmlBlock
	| codeBlock
	| dotBlock
	| mathBlock
	| texBlock
	| umlBlock
	;

page		: /page		 	{ doModule(); } ;

header		: //header		{ doHeader(); } ;
hrule		: //hrule		{ doType(HRule); } ;

comment		: //comment		{ doType(Comment); } ;

htmlBlock	: //htmlBlock	{ doType(HtmlBlock); } ;

yamlBlock	: //yamlBlock	{ doType(YamlBlock); } ;
codeBlock	: //codeBlock	{ doType(CodeBlock); } ;
dotBlock	: //dotBlock	{ doType(DotBlock); } ;
mathBlock	: //mathBlock	{ doType(MathBlock); } ;
texBlock	: //texBlock	{ doType(TexBlock) ; } ;
umlBlock	: //umlBlock	{ doType(UmlBlock) ; } ;

definition	: //definition	{ doType(Definition); } ;
table		: //table		{ doType(Table); } ;

paragraph	: //paragraph	
				{ onEntry: doStatement(Paragraph); } 
				{ onExit:  endBlock(); }
			;

phrase		: //phrase		{ doType(Phrase); } ;

list		: //list
				{ onEntry: doList(); }
				{ onExit:  endBlock(); }
			;

listItem	: //listItem	
				{ onEntry: doListItem(); }
				{ onExit:  endBlock(); } 
			;

link		: //link		
				{ onEntry: doLink(Link, INLINE); } 
				{ onExit:  endBlock(); }
			;

linkRef		: //linkRef		
				{ onEntry: doLink(Link, REF); }
				{ onExit:  endBlock(); }
			;


imglink		: //imgLink		
				{ onEntry: doLink(Image, INLINE); }
				{ onExit:  endBlock(); }
			;

imglinkRef	: //imgLinkRef	
				{ onEntry: doLink(Image, REF); }
				{ onExit:  endBlock(); }
			;


fnlink		: //fnLink		
				{ onEntry: doLink(Footnote, INLINE); }
				{ onExit:  endBlock(); }
			;

fnlinkRef	: //fnLinkRef	
				{ onEntry: doLink(Footnote, REF); }
				{ onExit:  endBlock(); }
			;


refLinkDef	: //refLinkDef	
				{ onEntry: doLink(Link, REF_DEF); }
				{ onExit:  endBlock(); }
			;

fnLinkDef	: //fnLinkDef	
				{ onEntry: doLink(Footnote, REF_DEF); }
				{ onExit:  endBlock(); }
			;



#attrL		: //attrLeft	{ doAttrL() ; } ;
#word		: //word		{ doWord()  ; } ;
#attrR		: //attrRight	{ doAttrR() ; } ;
